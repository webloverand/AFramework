/* 
*   NatCorder
*   Copyright (c) 2019 Yusuf Olokoba
*/

namespace NatCorder.Clocks {

    using Docs;

    /// <summary>
    /// Clock that produces timestamps spaced at a fixed interval.
    /// This clock is useful for enforcing a fixed framerate in a recording.
    /// </summary>
    [Doc(@"FixedIntervalClock")]
    public sealed class FixedIntervalClock : IClock {

        /// <summary>
        /// Interval between consecutive timestamps generated by the clock in seconds.
        /// </summary>
        [Doc(@"FixedIntervalClockInterval")]
        public readonly float Interval;
        /// <summary>
        /// Will the clock automatically advance when `CurrentTimestamp` is accesssed?
        /// When false, `Advance` must be called for the clock's timestamp to increment.
        /// </summary>
        [Doc(@"FixedIntervalClockAutoAdvance")]
        public readonly bool AutoAdvance;
        /// <summary>
        /// Current timestamp in nanoseconds.
        /// The very first value reported by this property will always be zero.
        /// </summary>
        [Doc(@"Timestamp")]
        public long Timestamp {
            get {
                long current;
                lock (timeFence)
                    current = timestamp;
                if (AutoAdvance)
                    Advance();
                return current;
            }
        }
        
        private long timestamp = 0L;
        private readonly object timeFence = new object();

        /// <summary>
        /// Create a fixed interval clock
        /// </summary>
        /// <param name="interval">Interval between consecutive timestamps in seconds</param>
        /// <param name="autoAdvance">Optional. When true, calling `CurrentTimestamp` will advance the clock. When false, clock must be manually advanced by calling `Advance`.</param>
        [Doc(@"FixedIntervalClockCtorInterval")]
        public FixedIntervalClock (float interval, bool autoAdvance = true) {
            Interval = interval;
            AutoAdvance = autoAdvance;
        }

        /// <summary>
        /// Create a fixed interval clock for a given framerate
        /// </summary>
        /// <param name="framerate">Desired framerate for clock's timestamps</param>
        /// <param name="autoAdvance">Optional. When true, calling `CurrentTimestamp` will advance the clock. When false, clock must be manually advanced by calling `Advance`.</param>
        [Doc(@"FixedIntervalClockCtorFramerate")]
        public FixedIntervalClock (int framerate, bool autoAdvance = true) : this(1f / framerate, autoAdvance) {}

        /// <summary>
        /// Advance the clock by its time interval.
        /// This method should only be used when the clock does not `AutoAdvance`
        /// </summary>
        [Doc(@"FixedIntervalClockAdvance")]
        public void Advance () {
            lock (timeFence)
                timestamp += (long)(Interval * 1e+9f);
        }
    }
}